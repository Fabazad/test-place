{"version":3,"file":"user.routes.js","sources":["routes/user.routes.ts"],"sourceRoot":"/","sourcesContent":["import { configs } from \"@/configs.js\";\nimport { UserController } from \"@/controllers/user.controller.js\";\nimport { decode } from \"@/middlewares/decode.js\";\nimport { withAuth } from \"@/middlewares/withAuth.js\";\nimport { asyncHandler } from \"@/utils/asyncHandler.js\";\nimport { Role } from \"@/utils/constants.js\";\nimport { handleResponseForRoute } from \"@/utils/CustomResponse.js\";\nimport { BadRequestError } from \"@/utils/exceptions/BadRequestError.js\";\nimport { ForbiddenRequestError } from \"@/utils/exceptions/ForbiddenRequestError.js\";\nimport { NotFoundRequestError } from \"@/utils/exceptions/NotFoundRequestError.js\";\nimport { ServerRequestError } from \"@/utils/exceptions/ServerRequestError.js\";\nimport { UnauthorizedRequestError } from \"@/utils/exceptions/UnauthorizedRequestError.js\";\nimport { Language } from \"@/utils/Language.js\";\nimport { booleanSchema } from \"@/utils/zod.utils.js\";\nimport { zodValidationForRoute } from \"@/utils/zodValidationForRoute.js\";\nimport express from \"express\";\nimport { z } from \"zod\";\n\nconst router = express.Router();\n\nrouter.post(\n  \"/register\",\n  asyncHandler(async (request, reply) => {\n    const { name, email, password, roles, language, affiliatedBy } =\n      zodValidationForRoute(\n        request.body,\n        z.object({\n          name: z.string().trim(),\n          email: z.string().trim().email(),\n          password: z.string().trim().min(configs.MIN_PASSWORD_LENGTH),\n          roles: z.array(z.nativeEnum(Role)),\n          language: z.nativeEnum(Language),\n          affiliatedBy: z.string().trim().optional(),\n        })\n      );\n\n    const frontendUrl = zodValidationForRoute(request.headers.origin, z.string());\n\n    const res = await UserController.credentialRegister({\n      roles,\n      name,\n      email,\n      password,\n      language,\n      frontendUrl,\n      affiliatedBy,\n    });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        duplicate_email: new BadRequestError(\"duplicate_email\"),\n        duplicate_name: new BadRequestError(\"duplicate_name\"),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/login\",\n  asyncHandler(async (request, reply) => {\n    const { email, password, keepConnection } = zodValidationForRoute(\n      request.body,\n      z.object({\n        email: z.string().trim().email(),\n        password: z.string().trim(),\n        keepConnection: z.boolean(),\n      })\n    );\n\n    const ip =\n      (request.headers[\"x-forwarded-for\"] as string | undefined) ||\n      request.connection.remoteAddress;\n\n    const res = await UserController.credentialLogin({\n      email,\n      password,\n      staySignedIn: keepConnection,\n      ip,\n    });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        user_not_found_when_logging: new ServerRequestError(\n          \"user_not_found_when_logging\"\n        ),\n        email_not_found: new NotFoundRequestError(\"email_not_found\"),\n        wrong_password: new BadRequestError(\"wrong_password\"),\n        email_not_validated: new ForbiddenRequestError(\"email_not_validated\"),\n        missing_password: new NotFoundRequestError(\"missing_password\"),\n      })\n    );\n  })\n);\n\nrouter.get(\n  \"/checkToken\",\n  decode,\n  asyncHandler(async (request, reply) => {\n    const { logged } = zodValidationForRoute(\n      request.query,\n      z.object({ logged: booleanSchema() })\n    );\n\n    const res = await UserController.checkToken({ logged, decoded: request.decoded });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        user_not_found_when_logging: new ServerRequestError(\n          \"user_not_found_when_logging\"\n        ),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/resetPasswordMail\",\n  asyncHandler(async (request, reply) => {\n    const { email } = zodValidationForRoute(\n      request.body,\n      z.object({ email: z.string().trim().email() })\n    );\n    const frontendUrl = zodValidationForRoute(request.headers.origin, z.string());\n\n    const res = await UserController.resetPasswordMail({ email, frontendUrl });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        email_not_found: new NotFoundRequestError(\"email_not_found\"),\n        email_not_sent: ({ errorMessage }) =>\n          new ServerRequestError(\"email_not_sent\", errorMessage),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/resetPassword\",\n  asyncHandler(async (request, reply) => {\n    const { password, resetPasswordToken } = zodValidationForRoute(\n      request.body,\n      z.object({\n        password: z.string().trim().min(configs.MIN_PASSWORD_LENGTH),\n        resetPasswordToken: z.string(),\n      })\n    );\n    const res = await UserController.resetPassword({ password, resetPasswordToken });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        user_not_found: new NotFoundRequestError(\"user_not_found\"),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/updatePassword\",\n  withAuth(),\n  asyncHandler(async (request, reply) => {\n    const { previousPassword, password } = zodValidationForRoute(\n      request.body,\n      z.object({\n        previousPassword: z.string().trim(),\n        password: z.string().trim().min(configs.MIN_PASSWORD_LENGTH),\n      })\n    );\n    const { userId } = request.decoded!;\n\n    const res = await UserController.updatePassword({\n      previousPassword,\n      password,\n      userId,\n    });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        missing_password: new BadRequestError(\"missing_password\"),\n        user_not_found: new NotFoundRequestError(\"user_not_found\"),\n        user_not_found_when_updating_password: new ServerRequestError(\n          \"user_not_found_when_updating_password\"\n        ),\n        wrong_password: new BadRequestError(\"wrong_password\"),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/emailValidation\",\n  asyncHandler(async (request, reply) => {\n    const { userId } = zodValidationForRoute(\n      request.body,\n      z.object({ userId: z.string() })\n    );\n\n    const res = await UserController.emailValidation({ userId });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        user_not_found: new NotFoundRequestError(\"user_not_found\"),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/validationMail\",\n  asyncHandler(async (request, reply) => {\n    const { email } = zodValidationForRoute(\n      request.body,\n      z.object({ email: z.string() })\n    );\n\n    const frontendUrl = zodValidationForRoute(request.headers.origin, z.string());\n\n    const res = await UserController.validationMail({ email, frontendUrl });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        user_not_found: new NotFoundRequestError(\"user_not_found\"),\n        already_validated: new BadRequestError(\"already_validated\"),\n        email_not_sent: ({ errorMessage }) =>\n          new ServerRequestError(\"email_not_sent\", errorMessage),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/updateUserInfo\",\n  withAuth(),\n  asyncHandler(async (request, reply) => {\n    const decoded = request.decoded!;\n    const { data: updates, userId } = zodValidationForRoute(\n      request.body,\n      z.object({\n        userId: z.string(),\n        data: z.object({\n          name: z.string().trim().min(1).optional(),\n          testerMessage: z.string().trim().optional(),\n          sellerMessage: z.string().trim().optional(),\n          paypalEmail: z.string().trim().email().min(1).optional(),\n          amazonId: z.string().trim().min(1).optional(),\n        }),\n      })\n    );\n\n    const res = await UserController.updateUserInfo({ decoded, userId, updates });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        user_not_found: new NotFoundRequestError(\"user_not_found\"),\n        unauthorized: new UnauthorizedRequestError(\"unauthorized\"),\n        name_already_used: new BadRequestError(\"name_already_used\"),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/contact-us\",\n  asyncHandler(async (request, reply) => {\n    const { name, email, message } = zodValidationForRoute(\n      request.body,\n      z.object({\n        name: z.string().trim().min(1),\n        email: z.string().trim().min(1).email(),\n        message: z.string().trim().min(1),\n      })\n    );\n    const res = await UserController.sendContactUsEmail({ name, email, message });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        email_not_sent: new BadRequestError(\"email_not_sent\"),\n      })\n    );\n  })\n);\n\nrouter.get(\"/users\", withAuth(Role.ADMIN), async (request, reply) => {\n  console.log(\"ROUTE\");\n  const res = await UserController.getUsers();\n  reply.send(handleResponseForRoute(res));\n});\n\nrouter.get(\n  \"/:userId\",\n  asyncHandler(async (request, reply) => {\n    const { userId } = zodValidationForRoute(\n      request.params,\n      z.object({ userId: z.string().min(1) })\n    );\n    const res = await UserController.getOne({ userId });\n    reply.send(\n      handleResponseForRoute(res, {\n        user_not_found: new NotFoundRequestError(\"user_not_found\"),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/google-register\",\n  asyncHandler(async (request, reply) => {\n    const { credential, roles, language, affiliatedBy } = zodValidationForRoute(\n      request.body,\n      z.object({\n        credential: z.string().min(1),\n        roles: z.array(z.nativeEnum(Role)),\n        language: z.nativeEnum(Language),\n        affiliatedBy: z.string().trim().optional(),\n      })\n    );\n\n    const res = await UserController.googleRegister({\n      credential,\n      roles,\n      language,\n      affiliatedBy,\n    });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        name_already_used_when_adding_email: new ServerRequestError(\n          \"name_already_used_when_adding_email\"\n        ),\n        user_not_found_when_adding_email: new ServerRequestError(\n          \"user_not_found_when_adding_email\"\n        ),\n        user_not_found_when_logging: new ServerRequestError(\n          \"user_not_found_when_logging\"\n        ),\n        duplicate_email: new ServerRequestError(\"duplicate_email\"),\n        duplicate_name: new ServerRequestError(\"duplicate_name\"),\n        invalid_token: new ServerRequestError(\"invalid_token\"),\n        user_email_not_found: new ServerRequestError(\"user_email_not_found\"),\n        user_name_not_found: new ServerRequestError(\"user_name_not_found\"),\n        unknown_error: ({ errorMessage }) =>\n          new ServerRequestError(\"unknown_error\", errorMessage),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/google-login\",\n  asyncHandler(async (request, reply) => {\n    const { credential, keepConnection } = zodValidationForRoute(\n      request.body,\n      z.object({\n        credential: z.string().trim().min(1),\n        keepConnection: z.boolean(),\n      })\n    );\n\n    const res = await UserController.googleLogin({\n      staySignedIn: keepConnection,\n      credential,\n    });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        user_not_found: new NotFoundRequestError(\"user_not_found\"),\n        user_not_found_when_logging: new ServerRequestError(\n          \"user_not_found_when_logging\"\n        ),\n        unknown_error: ({ errorMessage }) =>\n          new ServerRequestError(\"unknown_error\", errorMessage),\n        invalid_token: new ServerRequestError(\"invalid_token\"),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/facebook-register\",\n  asyncHandler(async (request, reply) => {\n    const { accessToken, roles, language } = zodValidationForRoute(\n      request.body,\n      z.object({\n        accessToken: z.string().trim().min(1),\n        roles: z.array(z.nativeEnum(Role)),\n        language: z.nativeEnum(Language),\n      })\n    );\n\n    const res = await UserController.facebookRegister({ accessToken, roles, language });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        issue_with_facebook_login: new ServerRequestError(\"issue_with_facebook_login\"),\n        facebook_account_missing_email: new BadRequestError(\n          \"facebook_account_missing_email\"\n        ),\n        name_already_used: new BadRequestError(\"name_already_used\"),\n        user_not_found_when_adding_email: new ServerRequestError(\n          \"user_not_found_when_adding_email\"\n        ),\n        user_not_found_when_logging: new ServerRequestError(\n          \"user_not_found_when_logging\"\n        ),\n        duplicate_email_when_creating_user: new ServerRequestError(\n          \"duplicate_email_when_creating_user\"\n        ),\n        duplicate_name: new BadRequestError(\"duplicate_name\"),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/facebook-login\",\n  asyncHandler(async (request, reply) => {\n    const { accessToken, keepConnection } = zodValidationForRoute(\n      request.body,\n      z.object({\n        accessToken: z.string().trim().min(1),\n        keepConnection: z.boolean(),\n      })\n    );\n\n    const res = await UserController.facebookLogin({\n      accessToken,\n      staySignedIn: keepConnection,\n    });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        user_not_found: new NotFoundRequestError(\"user_not_found\"),\n        user_not_found_when_logging: new ServerRequestError(\n          \"user_not_found_when_logging\"\n        ),\n        facebook_account_missing_email: new BadRequestError(\n          \"facebook_account_missing_email\"\n        ),\n        issue_with_facebook_login: new ServerRequestError(\"issue_with_facebook_login\"),\n      })\n    );\n  })\n);\n\nrouter.post(\n  \"/update-language\",\n  withAuth(),\n  asyncHandler(async (request, reply) => {\n    const { language } = zodValidationForRoute(\n      request.body,\n      z.object({\n        language: z.nativeEnum(Language),\n      })\n    );\n\n    const { userId } = request.decoded!;\n\n    const res = await UserController.updateLanguage({ userId, language });\n\n    reply.send(\n      handleResponseForRoute(res, {\n        user_not_found: new NotFoundRequestError(\"user_not_found\"),\n      })\n    );\n  })\n);\n\nrouter.post(\"/impersonate\", withAuth(Role.ADMIN), async (request, reply) => {\n  const { userId } = request.decoded!;\n  const { impersonatedUserId } = zodValidationForRoute(\n    request.body,\n    z.object({ impersonatedUserId: z.string() })\n  );\n\n  const res = await UserController.impersonate({ userId, impersonatedUserId });\n\n  reply.send(\n    handleResponseForRoute(res, {\n      user_not_found: new NotFoundRequestError(\"user_not_found\"),\n      same_user: new BadRequestError(\"same_user\"),\n      user_not_found_when_logging: new ServerRequestError(\"user_not_found_when_logging\"),\n    })\n  );\n});\n\nexport default router;\n"],"names":[],"mappings":"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","debug_id":"ed57aee9-8f3a-5db6-b4ad-93573577160b"}