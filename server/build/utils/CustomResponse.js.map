{"version":3,"file":"CustomResponse.js","sources":["utils/CustomResponse.ts"],"sourceRoot":"/","sourcesContent":["import { HttpRequestError } from \"./exceptions/index.js\";\n\nexport type FailedResponse<ErrorCode extends string> = {\n  success: false;\n  errorCode: ErrorCode;\n  errorMessage?: string;\n};\n\nexport type SuccessResponse<SuccessData> = {\n  success: true;\n  data: SuccessData;\n};\n\nexport type CustomResponse<\n  SuccessData,\n  ErrorCode extends string | undefined = undefined\n> = ErrorCode extends string\n  ? FailedResponse<ErrorCode> | SuccessResponse<SuccessData>\n  : SuccessResponse<SuccessData>;\n\nconst isFailedResponse = <ErrorCode extends string>(\n  response:\n    | CustomResponse<unknown, ErrorCode>\n    | SuccessResponse<unknown>\n    | FailedResponse<ErrorCode>\n): response is FailedResponse<ErrorCode> => !response.success;\n\ntype RouteErrorHandler<ErrorCode extends string, RequestError = HttpRequestError> =\n  | RequestError\n  | ((params: { errorCode: ErrorCode; errorMessage?: string }) => RequestError);\n\nexport function handleResponseForRoute<Data>(response: SuccessResponse<Data>): Data;\nexport function handleResponseForRoute<\n  Data,\n  ErrorCode extends string,\n  RequestError = HttpRequestError\n>(\n  response: CustomResponse<Data, ErrorCode>,\n  handlers: Record<ErrorCode, RouteErrorHandler<ErrorCode, RequestError>>\n): Data;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function handleResponseForRoute<\n  Data extends unknown | undefined,\n  ErrorCode extends string\n>(\n  response: SuccessResponse<Data> | FailedResponse<ErrorCode>,\n  handlers: Record<ErrorCode, RouteErrorHandler<ErrorCode>>\n): undefined;\nexport function handleResponseForRoute<\n  Data extends unknown | undefined,\n  ErrorCode extends string\n>(\n  response: CustomResponse<Data, ErrorCode>,\n  handlers?: Record<ErrorCode, RouteErrorHandler<ErrorCode>>\n): Data | undefined {\n  if (isFailedResponse(response)) {\n    const handler = handlers?.[response.errorCode];\n    throw typeof handler === \"function\" ? handler(response) : handler;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return \"data\" in response ? response.data : undefined;\n}\n\nexport const formatFailedResponse = <\n  ErrorCode extends string,\n  NewErrorCode extends string\n>(\n  response: FailedResponse<ErrorCode>,\n  map: Record<ErrorCode, NewErrorCode>\n): FailedResponse<NewErrorCode> => {\n  const newError = map[response.errorCode];\n  return { success: false, errorCode: newError, errorMessage: response.errorMessage };\n};\n"],"names":[],"mappings":";;AAoBA,MAAM,gBAAgB,GAAG,CACvB,QAG6B,EACU,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC;AAuB9D,MAAM,UAAU,sBAAsB,CAIpC,QAAyC,EACzC,QAA0D;IAE1D,IAAI,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/B,MAAM,OAAO,GAAG,QAAQ,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC/C,MAAM,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IACpE,CAAC;IACD,6DAA6D;IAC7D,aAAa;IACb,OAAO,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;AACxD,CAAC;AAED,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAIlC,QAAmC,EACnC,GAAoC,EACN,EAAE;IAChC,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACzC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,CAAC,YAAY,EAAE,CAAC;AACtF,CAAC,CAAC","debug_id":"b366390a-aeef-536f-8c2a-e03a845291e1"}