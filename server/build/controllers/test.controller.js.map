{"version":3,"file":"test.controller.js","sources":["controllers/test.controller.ts"],"sourceRoot":"/","sourcesContent":["import { configs } from \"@/configs.js\";\nimport { getProductDAO } from \"@/entities/Product/dao/product.dao.index.js\";\nimport { Product } from \"@/entities/Product/product.entity.js\";\nimport { getTestDAO } from \"@/entities/Test/dao/test.dao.index.js\";\nimport { GLOBAL_TEST_STATUSES, TestStatus } from \"@/entities/Test/test.constants.js\";\nimport { PopulatedTest, Test, TestData } from \"@/entities/Test/test.entity.js\";\nimport { getUserDAO } from \"@/entities/User/dao/user.dao.index.js\";\nimport { UserWithoutPassword } from \"@/entities/User/user.entity.js\";\nimport {\n  NOTIFICATION_TYPES,\n  Role,\n  TEST_STATUS_PROCESSES,\n  TestStatusUpdateParams,\n} from \"@/utils/constants.js\";\nimport { CustomResponse } from \"@/utils/CustomResponse.js\";\nimport dayjs from \"dayjs\";\nimport _ from \"lodash\";\nimport { AffiliationController } from \"./affiliation.controller.js\";\nimport { NotificationController } from \"./notification.controller.js\";\nimport { UserController } from \"./user.controller.js\";\n\nexport class TestController {\n  private static async generateTestData(params: {\n    product: Product;\n    userId: string;\n    status: TestStatus;\n    testerMessage?: string;\n  }): Promise<\n    CustomResponse<TestData, \"seller_not_found\" | \"dont_have_automatic_acceptance\">\n  > {\n    const { product, userId, status, testerMessage } = params;\n    const userDAO = getUserDAO();\n\n    const baseTestData: Pick<\n      TestData,\n      \"product\" | \"seller\" | \"tester\" | \"testerMessage\"\n    > = {\n      product: product,\n      seller: product.seller,\n      tester: userId,\n      testerMessage,\n    };\n\n    if (status === TestStatus.REQUEST_ACCEPTED) {\n      if (!product.automaticAcceptance) {\n        return { success: false, errorCode: \"dont_have_automatic_acceptance\" };\n      }\n\n      const seller = await userDAO.getUser({ userId: product.seller });\n      if (!seller) {\n        return { success: false, errorCode: \"seller_not_found\" };\n      }\n      return {\n        success: true,\n        data: {\n          ...baseTestData,\n          status: TestStatus.REQUEST_ACCEPTED,\n          sellerMessage: seller.sellerMessage,\n          expirationDate: null,\n          updates: [],\n        },\n      };\n    }\n\n    return {\n      success: true,\n      data: {\n        ...baseTestData,\n        status: TestStatus.REQUESTED,\n        expirationDate: dayjs().add(7, \"days\").toDate(),\n        updates: [],\n      },\n    };\n  }\n  static async create(params: {\n    productId: string;\n    userId: string;\n    status: TestStatus;\n    testerMessage?: string;\n    frontendUrl: string;\n  }): Promise<\n    CustomResponse<\n      Test,\n      | \"product_not_found\"\n      | \"not_enough_remaining_requests\"\n      | \"user_is_seller\"\n      | \"dont_have_automatic_acceptance\"\n      | \"seller_not_found\"\n      | \"user_to_notify_not_found\"\n      | \"already_testing\"\n      | \"previous_request_declined\"\n      | \"testing_limit_reached\"\n    >\n  > {\n    const { productId, userId, status, testerMessage, frontendUrl } = params;\n\n    const productDAO = getProductDAO();\n    const testDAO = getTestDAO();\n\n    const currentTestCount = await testDAO.countTestWithStatues({\n      userId,\n      statuses: [...GLOBAL_TEST_STATUSES.PROCESSING, TestStatus.REQUESTED],\n    });\n\n    if (currentTestCount >= configs.MAX_TESTING_PER_USER) {\n      return { success: false, errorCode: \"testing_limit_reached\" };\n    }\n\n    const product = await productDAO.getProductById({ id: productId });\n    if (!product) {\n      return { success: false, errorCode: \"product_not_found\" };\n    }\n    if (product.remainingTestsCount <= 0) {\n      return { success: false, errorCode: \"not_enough_remaining_requests\" };\n    }\n    if (product.seller === userId) {\n      return { success: false, errorCode: \"user_is_seller\" };\n    }\n\n    const testDataRes = await this.generateTestData({\n      product,\n      userId,\n      status,\n      testerMessage,\n    });\n    if (!testDataRes.success) return testDataRes;\n\n    const creationRes = await testDAO.createTest({ testData: testDataRes.data });\n\n    if (!creationRes.success) return creationRes;\n\n    const test = creationRes.data;\n\n    await Promise.all([\n      productDAO.decrementRemainingTestsCount({ productId }),\n      NotificationController.createNotification({\n        notificationData: {\n          user: test.seller,\n          type: NOTIFICATION_TYPES.NEW_REQUEST.value,\n          test: test,\n          product,\n        },\n        frontendUrl,\n      }),\n    ]);\n\n    return { success: true, data: test };\n  }\n\n  static async getStatuses(): Promise<Record<string, TestStatus>> {\n    return TestStatus;\n  }\n\n  static async find(params: {\n    userId: string;\n    searchData: {\n      itemsPerPage: number;\n      page: number;\n      statuses?: Array<TestStatus>;\n      asSeller?: boolean;\n      asTester?: boolean;\n    };\n  }): Promise<CustomResponse<{ hits: Array<PopulatedTest>; totalCount: number }>> {\n    const { userId, searchData } = params;\n    const { itemsPerPage, page, statuses, asSeller, asTester } = searchData;\n\n    const testDAO = getTestDAO();\n\n    const skip = itemsPerPage * (page - 1);\n    const limit = itemsPerPage;\n\n    const [hits, totalCount] = await Promise.all([\n      testDAO.findWIthAllPopulated({\n        statuses,\n        seller: asSeller ? userId : undefined,\n        tester: asTester ? userId : undefined,\n        skip,\n        limit,\n      }),\n      testDAO.count({\n        statuses,\n        seller: asSeller ? userId : undefined,\n        tester: asTester ? userId : undefined,\n      }),\n    ]);\n\n    return { success: true, data: { hits, totalCount } };\n  }\n\n  private static async checkAndUpdateUserCertification(\n    userId: string\n  ): Promise<\n    CustomResponse<\n      UserWithoutPassword,\n      \"user_not_found\" | \"user_not_found_while_updating\"\n    >\n  > {\n    const testDAO = getTestDAO();\n    const userDAO = getUserDAO();\n\n    const [completedTestsCount, cancelledTestsCount, user] = await Promise.all([\n      testDAO.countTestWithStatues({ userId, statuses: GLOBAL_TEST_STATUSES.COMPLETED }),\n      testDAO.countTestWithStatues({\n        userId,\n        statuses: GLOBAL_TEST_STATUSES.CANCELLED,\n        withGuilty: true,\n      }),\n      userDAO.getUser({ userId }),\n    ]);\n\n    if (!user) return { success: false, errorCode: \"user_not_found\" };\n\n    const isCertified =\n      completedTestsCount * configs.CERTIFIED_RATIO >= cancelledTestsCount;\n\n    if (user.isCertified === isCertified) return { success: true, data: user };\n\n    const newUser = await userDAO.setIsCertified({ userId, isCertified });\n\n    if (!newUser) return { success: false, errorCode: \"user_not_found_while_updating\" };\n\n    return { success: true, data: newUser };\n  }\n\n  static async updateStatus({\n    userId,\n    testId,\n    update,\n    frontendUrl,\n  }: {\n    userId: string;\n    testId: string;\n    update: TestStatusUpdateParams;\n    frontendUrl: string;\n  }): Promise<\n    CustomResponse<\n      {\n        test: Test;\n        requestedTestsCount: number;\n        processingTestsCount: number;\n        completedTestsCount: number;\n        cancelledTestsCount: number;\n      },\n      | \"test_not_found\"\n      | \"only_allowed_for_tester\"\n      | \"only_allowed_for_seller\"\n      | \"wrong_previous_status\"\n      | \"test_not_found_when_updating\"\n      | \"user_to_notify_not_found\"\n    >\n  > {\n    const testDAO = getTestDAO();\n\n    const testStatusProcessStep = TEST_STATUS_PROCESSES[update.status];\n\n    const test = await testDAO.findById({ id: testId });\n\n    if (!test) return { success: false, errorCode: \"test_not_found\" };\n\n    if (testStatusProcessStep.role) {\n      if (testStatusProcessStep.role === Role.TESTER && test.tester !== userId) {\n        return { success: false, errorCode: \"only_allowed_for_tester\" };\n      }\n      if (testStatusProcessStep.role === Role.SELLER && test.seller !== userId) {\n        return { success: false, errorCode: \"only_allowed_for_seller\" };\n      }\n    }\n    if (!testStatusProcessStep.previous?.includes(test.status)) {\n      return { success: false, errorCode: \"wrong_previous_status\" };\n    }\n\n    const newTest = await testDAO.updateTestStatus({\n      id: testId,\n      statusUpdate: update,\n      cancellationGuilty:\n        update.status === TestStatus.TEST_CANCELLED ? userId : undefined,\n    });\n\n    if (newTest === null) {\n      return { success: false, errorCode: \"test_not_found_when_updating\" };\n    }\n\n    const userToNotify = testStatusProcessStep.role\n      ? testStatusProcessStep.role === Role.TESTER\n        ? test.seller\n        : test.tester\n      : userId === test.seller\n      ? test.tester\n      : test.seller;\n\n    const [\n      requestedTestsCount,\n      processingTestsCount,\n      completedTestsCount,\n      cancelledTestsCount,\n    ] = await Promise.all([\n      testDAO.countTestWithStatues({ userId, statuses: GLOBAL_TEST_STATUSES.REQUESTED }),\n      testDAO.countTestWithStatues({ userId, statuses: GLOBAL_TEST_STATUSES.PROCESSING }),\n      testDAO.countTestWithStatues({ userId, statuses: GLOBAL_TEST_STATUSES.COMPLETED }),\n      testDAO.countTestWithStatues({ userId, statuses: GLOBAL_TEST_STATUSES.CANCELLED }),\n      NotificationController.createNotification({\n        notificationData: {\n          user: userToNotify,\n          test: newTest,\n          type: testStatusProcessStep.notificationType,\n          product: newTest.product,\n        },\n        frontendUrl,\n      }),\n    ]);\n\n    if (\n      update.status === TestStatus.TEST_CANCELLED ||\n      update.status === TestStatus.MONEY_RECEIVED\n    ) {\n      await Promise.all([\n        TestController.checkAndUpdateUserCertification(test.tester),\n        TestController.checkAndUpdateUserCertification(test.seller),\n      ]);\n    }\n\n    await Promise.all([\n      AffiliationController.checkForAffiliatedCommissionRecord({\n        affiliatedId: test.tester,\n        productAmount: test.product.price,\n        testStatus: update.status,\n      }),\n      UserController.checkForActivationEventsOnTestStatusUpdate(\n        test.tester,\n        update.status\n      ),\n    ]);\n\n    return {\n      success: true,\n      data: {\n        test: newTest,\n        requestedTestsCount,\n        processingTestsCount,\n        completedTestsCount,\n        cancelledTestsCount,\n      },\n    };\n  }\n\n  static async getTest(params: {\n    testId: string;\n    userId: string;\n    roles: Array<Role>;\n  }): Promise<CustomResponse<PopulatedTest, \"not_found\" | \"not_allowed\">> {\n    const { testId, userId, roles } = params;\n\n    const testDAO = getTestDAO();\n\n    const test = await testDAO.findPopulatedById({ id: testId });\n\n    if (!test) {\n      return { success: false, errorCode: \"not_found\" };\n    }\n\n    if (\n      test.seller._id !== userId &&\n      test.tester._id !== userId &&\n      !roles.includes(Role.ADMIN)\n    ) {\n      return { success: false, errorCode: \"not_allowed\" };\n    }\n\n    return { success: true, data: test };\n  }\n\n  static async checkPendingTests(params: {\n    cancelPendingDays: number;\n    notificationPendingDays: number;\n    frontendUrl: string;\n    dryRun?: boolean;\n  }): Promise<CustomResponse<undefined>> {\n    const { cancelPendingDays, notificationPendingDays, frontendUrl, dryRun } = params;\n    const testDAO = getTestDAO();\n\n    const pendingTests = await testDAO.findPendingTests({\n      pendingDays: notificationPendingDays,\n    });\n\n    if (pendingTests.length === 0) return { success: true, data: undefined };\n\n    const [testsToCancel, testsToNotify] = _.partition(pendingTests, ({ updatedAt }) =>\n      dayjs(updatedAt).isBefore(dayjs().subtract(cancelPendingDays, \"days\"))\n    );\n\n    console.log(\"Start\", {\n      testsToCancel: testsToCancel.length,\n      testsToNotify: testsToNotify.length,\n    });\n\n    const getGuilty = (test: {\n      seller: string;\n      tester: string;\n      status: TestStatus;\n    }): string => {\n      const guiltyMap: Record<TestStatus, string | null> = {\n        [TestStatus.REQUEST_ACCEPTED]: test.tester,\n        [TestStatus.PRODUCT_ORDERED]: test.tester,\n        [TestStatus.PRODUCT_RECEIVED]: test.tester,\n        [TestStatus.PRODUCT_REVIEWED]: test.seller,\n        [TestStatus.MONEY_RECEIVED]: null,\n        [TestStatus.MONEY_SENT]: test.tester,\n        [TestStatus.REVIEW_VALIDATED]: test.seller,\n        [TestStatus.TEST_CANCELLED]: null,\n        [TestStatus.REQUEST_CANCELLED]: null,\n        [TestStatus.REQUEST_DECLINED]: null,\n        [TestStatus.REQUESTED]: test.seller,\n        [TestStatus.REVIEW_REFUSED]: null,\n      };\n      return guiltyMap[test.status] as string;\n    };\n\n    const testsCancellations = testsToCancel.map((test) => ({\n      testId: test._id,\n      guiltyUserId: getGuilty(test),\n    }));\n\n    if (!dryRun) {\n      await testDAO.cancelTests({\n        testsCancellations,\n        adminMessage:\n          \"Timeout, the test has been cancelled because it's been too long in the same status.\",\n      });\n    }\n\n    console.log({\n      testsToCancel: testsToCancel.length,\n    });\n\n    if (!dryRun) {\n      await Promise.all(\n        testsToNotify.map((test) =>\n          NotificationController.createNotification({\n            frontendUrl,\n            notificationData: {\n              user: getGuilty(test),\n              type: TEST_STATUS_PROCESSES[test.status].notificationType,\n              test,\n              product: test.product,\n            },\n          })\n        )\n      );\n    }\n\n    console.log({\n      testsToNotify: testsToNotify.length,\n    });\n\n    return { success: true, data: undefined };\n  }\n}\n"],"names":[],"mappings":"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","debug_id":"faf10aa2-582a-54af-89a1-c664859f9176"}