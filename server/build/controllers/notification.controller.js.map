{"version":3,"file":"notification.controller.js","sources":["controllers/notification.controller.ts"],"sourceRoot":"/","sourcesContent":["import { getNotificationDAO } from \"@/entities/Notification/dao/notification.dao.index.js\";\nimport {\n  Notification,\n  NotificationData,\n} from \"@/entities/Notification/notification.entity.js\";\nimport { getTestDAO } from \"@/entities/Test/dao/test.dao.index.js\";\nimport { GLOBAL_TEST_STATUSES } from \"@/entities/Test/test.constants.js\";\nimport { getUserDAO } from \"@/entities/User/dao/user.dao.index.js\";\nimport { getEmailClient } from \"@/libs/EmailClient/index.js\";\nimport { getMonitoringClient } from \"@/libs/MonitoringClient/index.js\";\nimport { CustomResponse } from \"@/utils/CustomResponse.js\";\n\nexport class NotificationController {\n  private static async sendNotification(params: {\n    notification: Notification;\n    frontendUrl: string;\n  }): Promise<CustomResponse<undefined, \"user_not_found\" | \"email_not_sent\">> {\n    const { notification, frontendUrl } = params;\n\n    const userDAO = getUserDAO();\n    const emailClient = getEmailClient();\n\n    const user = await userDAO.getUser({ userId: notification.user });\n\n    if (!user) return { success: false, errorCode: \"user_not_found\" };\n\n    const emailRes = await emailClient.sendNotificationMail({\n      notification,\n      to: { email: user.email, name: user.name, language: user.language },\n      frontendUrl,\n      userRole: user.roles[0],\n    });\n\n    if (!emailRes.success) return emailRes;\n\n    return { success: true, data: undefined };\n  }\n\n  static async getUserNotifications(userId: string): Promise<\n    CustomResponse<\n      | { notifications: Array<Notification> }\n      | {\n          notifications: Array<Notification>;\n          requestedTestsCount: number;\n          processingTestsCount: number;\n          completedTestsCount: number;\n          cancelledTestsCount: number;\n        }\n    >\n  > {\n    const testDAO = getTestDAO();\n    const notificationDAO = getNotificationDAO();\n\n    const notifications = await notificationDAO.getUserNotifications(userId);\n\n    const hasNewNotifications = notifications.some(\n      (notification) => notification.viewDate === null\n    );\n\n    if (hasNewNotifications) {\n      const [\n        requestedTestsCount,\n        processingTestsCount,\n        completedTestsCount,\n        cancelledTestsCount,\n      ] = await Promise.all([\n        testDAO.countTestWithStatues({\n          userId,\n          statuses: GLOBAL_TEST_STATUSES.REQUESTED,\n        }),\n        testDAO.countTestWithStatues({\n          userId,\n          statuses: GLOBAL_TEST_STATUSES.PROCESSING,\n        }),\n        testDAO.countTestWithStatues({\n          userId,\n          statuses: GLOBAL_TEST_STATUSES.COMPLETED,\n        }),\n        testDAO.countTestWithStatues({\n          userId,\n          statuses: GLOBAL_TEST_STATUSES.CANCELLED,\n        }),\n      ]);\n\n      return {\n        success: true,\n        data: {\n          notifications,\n          requestedTestsCount,\n          processingTestsCount,\n          completedTestsCount,\n          cancelledTestsCount,\n        },\n      };\n    }\n\n    return { success: true, data: { notifications } };\n  }\n\n  static async setNotificationsViewed(\n    userId: string,\n    notificationsIds: Array<string>\n  ): Promise<CustomResponse<undefined>> {\n    await getNotificationDAO().setNotificationsViewed({ userId, notificationsIds });\n    return { success: true, data: undefined };\n  }\n\n  static async createNotification(params: {\n    notificationData: NotificationData;\n    frontendUrl: string;\n    noEmail?: boolean;\n  }): Promise<CustomResponse<Notification, \"user_not_found\">> {\n    const { notificationData, frontendUrl, noEmail } = params;\n\n    const notificationDAO = getNotificationDAO();\n    const monitoringClient = getMonitoringClient();\n\n    const notification = await notificationDAO.createNotification({\n      notificationData: notificationData,\n    });\n\n    if (noEmail) {\n      return { success: true, data: notification };\n    }\n\n    const sentNotification = await this.sendNotification({\n      notification,\n      frontendUrl,\n    });\n\n    if (!sentNotification.success) {\n      await monitoringClient.sendEvent({\n        level: \"error\",\n        eventName: \"notification_not_sent\",\n        data: {\n          message: `[${sentNotification.errorCode}] ${sentNotification.errorMessage}`,\n        },\n      });\n    }\n\n    return { success: true, data: notification };\n  }\n}\n"],"names":[],"mappings":";;AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,uDAAuD,CAAC;AAK3F,OAAO,EAAE,UAAU,EAAE,MAAM,uCAAuC,CAAC;AACnE,OAAO,EAAE,oBAAoB,EAAE,MAAM,mCAAmC,CAAC;AACzE,OAAO,EAAE,UAAU,EAAE,MAAM,uCAAuC,CAAC;AACnE,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAC7D,OAAO,EAAE,mBAAmB,EAAE,MAAM,kCAAkC,CAAC;AAGvE,MAAM,OAAO,sBAAsB;IACzB,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAGrC;QACC,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;QAE7C,MAAM,OAAO,GAAG,UAAU,EAAE,CAAC;QAC7B,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;QAErC,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;QAElE,IAAI,CAAC,IAAI;YAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;QAElE,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,oBAAoB,CAAC;YACtD,YAAY;YACZ,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE;YACnE,WAAW;YACX,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;SACxB,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,OAAO;YAAE,OAAO,QAAQ,CAAC;QAEvC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAc;QAY9C,MAAM,OAAO,GAAG,UAAU,EAAE,CAAC;QAC7B,MAAM,eAAe,GAAG,kBAAkB,EAAE,CAAC;QAE7C,MAAM,aAAa,GAAG,MAAM,eAAe,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAEzE,MAAM,mBAAmB,GAAG,aAAa,CAAC,IAAI,CAC5C,CAAC,YAAY,EAAE,EAAE,CAAC,YAAY,CAAC,QAAQ,KAAK,IAAI,CACjD,CAAC;QAEF,IAAI,mBAAmB,EAAE,CAAC;YACxB,MAAM,CACJ,mBAAmB,EACnB,oBAAoB,EACpB,mBAAmB,EACnB,mBAAmB,EACpB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACpB,OAAO,CAAC,oBAAoB,CAAC;oBAC3B,MAAM;oBACN,QAAQ,EAAE,oBAAoB,CAAC,SAAS;iBACzC,CAAC;gBACF,OAAO,CAAC,oBAAoB,CAAC;oBAC3B,MAAM;oBACN,QAAQ,EAAE,oBAAoB,CAAC,UAAU;iBAC1C,CAAC;gBACF,OAAO,CAAC,oBAAoB,CAAC;oBAC3B,MAAM;oBACN,QAAQ,EAAE,oBAAoB,CAAC,SAAS;iBACzC,CAAC;gBACF,OAAO,CAAC,oBAAoB,CAAC;oBAC3B,MAAM;oBACN,QAAQ,EAAE,oBAAoB,CAAC,SAAS;iBACzC,CAAC;aACH,CAAC,CAAC;YAEH,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACJ,aAAa;oBACb,mBAAmB;oBACnB,oBAAoB;oBACpB,mBAAmB;oBACnB,mBAAmB;iBACpB;aACF,CAAC;QACJ,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,aAAa,EAAE,EAAE,CAAC;IACpD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,sBAAsB,CACjC,MAAc,EACd,gBAA+B;QAE/B,MAAM,kBAAkB,EAAE,CAAC,sBAAsB,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,CAAC,CAAC;QAChF,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAI/B;QACC,MAAM,EAAE,gBAAgB,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC;QAE1D,MAAM,eAAe,GAAG,kBAAkB,EAAE,CAAC;QAC7C,MAAM,gBAAgB,GAAG,mBAAmB,EAAE,CAAC;QAE/C,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,kBAAkB,CAAC;YAC5D,gBAAgB,EAAE,gBAAgB;SACnC,CAAC,CAAC;QAEH,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;QAC/C,CAAC;QAED,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC;YACnD,YAAY;YACZ,WAAW;SACZ,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,gBAAgB,CAAC,SAAS,CAAC;gBAC/B,KAAK,EAAE,OAAO;gBACd,SAAS,EAAE,uBAAuB;gBAClC,IAAI,EAAE;oBACJ,OAAO,EAAE,IAAI,gBAAgB,CAAC,SAAS,KAAK,gBAAgB,CAAC,YAAY,EAAE;iBAC5E;aACF,CAAC,CAAC;QACL,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;IAC/C,CAAC;CACF","debug_id":"9cc738ea-461e-544e-83ae-4679f46c38e6"}