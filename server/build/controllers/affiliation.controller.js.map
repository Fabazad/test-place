{"version":3,"file":"affiliation.controller.js","sources":["controllers/affiliation.controller.ts"],"sourceRoot":"/","sourcesContent":["import { PopulatedAffiliationRecord } from \"@/entities/AffiliationRecord/affiliationRecord.entity.js\";\nimport { getAffiliationRecordDAO } from \"@/entities/AffiliationRecord/dao/affiliationRecord.dao.index.js\";\nimport { getUserDAO } from \"@/entities/User/dao/user.dao.index.js\";\nimport { CustomResponse } from \"@/utils/CustomResponse.js\";\n\nexport class AffiliationController {\n  static async getUserAffiliated({\n    userId,\n    page,\n    itemsPerPage,\n  }: {\n    userId: string;\n    page: number;\n    itemsPerPage: number;\n  }): Promise<\n    CustomResponse<{\n      affiliated: Array<{\n        userId: string;\n        name: string;\n        email: string;\n        rateInPercent: number;\n        createdAt: string;\n      }>;\n      totalCount: number;\n    }>\n  > {\n    const userDAO = getUserDAO();\n    const { affiliated, totalCount } = await userDAO.getUserAffiliated({\n      userId,\n      page,\n      limit: itemsPerPage,\n    });\n    return { success: true, data: { affiliated, totalCount } };\n  }\n  static async checkForAffiliatedCommissionRecord(params: {\n    affiliatedId: string;\n    productAmount: number;\n  }): Promise<\n    CustomResponse<\n      undefined,\n      \"could_not_find_user\" | \"not_affiliated\" | \"could_not_find_ambassador\"\n    >\n  > {\n    const { affiliatedId, productAmount } = params;\n\n    const userDAO = getUserDAO();\n    const affiliationRecordDAO = getAffiliationRecordDAO();\n\n    const affiliated = await userDAO.getUser({ userId: affiliatedId });\n    if (!affiliated) return { success: false, errorCode: \"could_not_find_user\" };\n\n    if (!affiliated.affiliated) return { success: false, errorCode: \"not_affiliated\" };\n\n    const ambassador = await userDAO.getUser({ userId: affiliated.affiliated.by });\n    if (!ambassador) return { success: false, errorCode: \"could_not_find_ambassador\" };\n\n    const amount = +parseFloat(\n      `${(productAmount * affiliated.affiliated.rateInPercent) / 100}`\n    ).toFixed(2);\n\n    await affiliationRecordDAO.createAffiliatedCommissionRecord({\n      affiliatedId,\n      ambassadorId: ambassador._id,\n      rateInPercent: affiliated.affiliated.rateInPercent,\n      amount,\n    });\n\n    return { success: true, data: undefined };\n  }\n  static async getLastAffiliationRecords(params: {\n    page: number;\n    itemsPerPage: number;\n    userId: string;\n  }): Promise<\n    CustomResponse<{ records: Array<PopulatedAffiliationRecord>; totalCount: number }>\n  > {\n    const { page, itemsPerPage, userId } = params;\n    const affiliationRecordDAO = getAffiliationRecordDAO();\n\n    const { records, totalCount } = await affiliationRecordDAO.getLastRecords({\n      page,\n      limit: itemsPerPage,\n      ambassadorId: userId,\n    });\n\n    return { success: true, data: { records, totalCount } };\n  }\n\n  static async getUserAffiliationSummary(params: { userId: string }): Promise<\n    CustomResponse<{\n      affiliatedCount: number;\n      totalGeneratedMoney: number;\n      outstandingBalance: number;\n    }>\n  > {\n    const { userId } = params;\n\n    const userDAO = getUserDAO();\n    const affiliationRecordDAO = getAffiliationRecordDAO();\n\n    const [affiliatedCount, totalGeneratedMoney, outstandingBalance] = await Promise.all([\n      userDAO.getUserAffiliatedCount({ userId }),\n      affiliationRecordDAO.getTotalGeneratedMoney({ userId }),\n      affiliationRecordDAO.getOutstandingBalance({ userId }),\n    ]);\n\n    return {\n      success: true,\n      data: { affiliatedCount, totalGeneratedMoney, outstandingBalance },\n    };\n  }\n}\n"],"names":[],"mappings":"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","debug_id":"6092be83-6577-541f-be3a-00a13d1c6aab"}