{"version":3,"file":"user.controller.js","sources":["controllers/user.controller.ts"],"sourceRoot":"/","sourcesContent":["import { configs } from \"@/configs.js\";\nimport { getTestDAO } from \"@/entities/Test/dao/test.dao.index.js\";\nimport { GLOBAL_TEST_STATUSES } from \"@/entities/Test/test.constants.js\";\nimport { getUserDAO } from \"@/entities/User/dao/user.dao.index.js\";\nimport { UserWithoutPassword } from \"@/entities/User/user.entity.js\";\nimport { SignedInUser } from \"@/entities/User/user.helpers.js\";\nimport { getAuthManager } from \"@/libs/AuthManager/index.js\";\nimport { getEmailClient } from \"@/libs/EmailClient/index.js\";\nimport { getMonitoringClient } from \"@/libs/MonitoringClient/index.js\";\nimport { LogLevel } from \"@/libs/MonitoringClient/type.js\";\nimport { Role } from \"@/utils/constants.js\";\nimport { CustomResponse, formatFailedResponse } from \"@/utils/CustomResponse.js\";\nimport { DecodedUser } from \"@/utils/DecodedUser.type.js\";\nimport { Language } from \"@/utils/Language.js\";\nimport dayjs from \"dayjs\";\n\nexport class UserController {\n  static async credentialRegister(params: {\n    roles: Array<Role>;\n    name: string;\n    email: string;\n    password: string;\n    language: Language;\n    frontendUrl: string;\n  }): Promise<CustomResponse<undefined, \"duplicate_email\" | \"duplicate_name\">> {\n    const { roles, name, email, password, language, frontendUrl } = params;\n\n    const userDAO = getUserDAO();\n    const authManager = getAuthManager();\n    const emailClient = getEmailClient();\n    const monitoringClient = getMonitoringClient();\n\n    const hashedPassword = authManager.hashPassword(password);\n    const userRes = await userDAO.createUser({\n      userData: {\n        name,\n        email,\n        password: hashedPassword,\n        roles,\n        language,\n        isCertified: false,\n        emailValidation: false,\n      },\n    });\n\n    if (!userRes.success) return userRes;\n    const user = userRes.data;\n\n    const res = await emailClient.sendEmailValidationMail({\n      email,\n      userId: user._id,\n      language,\n      userName: user.name,\n      frontendUrl,\n    });\n\n    if (!res.success) {\n      await monitoringClient.sendEvent({\n        eventName: \"validation_email_not_sent\",\n        data: {\n          message: `[${res.errorCode}]: ${res.errorMessage}`,\n          params,\n          created: user,\n        },\n        level: LogLevel.ERROR,\n      });\n    }\n\n    return { success: true, data: undefined };\n  }\n\n  static async login(params: {\n    user: UserWithoutPassword;\n    staySignedIn: boolean;\n  }): Promise<CustomResponse<SignedInUser, \"user_not_found_when_logging\">> {\n    const { user, staySignedIn } = params;\n\n    const authManager = getAuthManager();\n    const userDAO = getUserDAO();\n    const testDAO = getTestDAO();\n\n    const token = authManager.encodeUser({\n      decodedUser: {\n        userId: user._id,\n        roles: user.roles,\n        amazonId: user.amazonId,\n      },\n      staySignedIn,\n    });\n\n    const [\n      newUser,\n      requestedTestsCount,\n      processingTestsCount,\n      completedTestsCount,\n      cancelledTestsCount,\n      guiltyTestsCount,\n    ] = await Promise.all([\n      userDAO.upToDateLastLogin({ userId: user._id }),\n      testDAO.countTestWithStatues({\n        userId: user._id,\n        statuses: GLOBAL_TEST_STATUSES.REQUESTED,\n      }),\n      testDAO.countTestWithStatues({\n        userId: user._id,\n        statuses: GLOBAL_TEST_STATUSES.PROCESSING,\n      }),\n      testDAO.countTestWithStatues({\n        userId: user._id,\n        statuses: GLOBAL_TEST_STATUSES.COMPLETED,\n      }),\n      testDAO.countTestWithStatues({\n        userId: user._id,\n        statuses: GLOBAL_TEST_STATUSES.CANCELLED,\n      }),\n      testDAO.countTestWithStatues({\n        userId: user._id,\n        statuses: GLOBAL_TEST_STATUSES.CANCELLED,\n        withGuilty: true,\n      }),\n    ]);\n\n    if (!newUser) return { success: false, errorCode: \"user_not_found_when_logging\" };\n\n    return {\n      success: true,\n      data: {\n        user: newUser,\n        token,\n        requestedTestsCount,\n        processingTestsCount,\n        completedTestsCount,\n        cancelledTestsCount,\n        guiltyTestsCount,\n      },\n    };\n  }\n\n  static async credentialLogin(params: {\n    email: string;\n    password: string;\n    staySignedIn: boolean;\n  }): Promise<\n    CustomResponse<\n      SignedInUser,\n      | \"wrong_password\"\n      | \"email_not_found\"\n      | \"email_not_validated\"\n      | \"missing_password\"\n      | \"user_not_found_when_logging\"\n    >\n  > {\n    const { email, password, staySignedIn } = params;\n\n    const userDAO = getUserDAO();\n    const authManager = getAuthManager();\n\n    const user = await userDAO.getUserWithPassword({ email });\n\n    if (!user) return { success: false, errorCode: \"email_not_found\" };\n\n    if (!user.emailValidation)\n      return { success: false, errorCode: \"email_not_validated\" };\n\n    if (!user.password) return { success: false, errorCode: \"missing_password\" };\n\n    if (!authManager.comparePasswords(password, user.password))\n      return { success: false, errorCode: \"wrong_password\" };\n\n    const loggedUser = await this.login({ user, staySignedIn });\n\n    if (!loggedUser.success) return loggedUser;\n\n    return { success: true, data: loggedUser.data };\n  }\n\n  static async resetPasswordMail(params: {\n    email: string;\n    frontendUrl: string;\n  }): Promise<\n    CustomResponse<{ user: UserWithoutPassword }, \"email_not_found\" | \"email_not_sent\">\n  > {\n    const { email, frontendUrl } = params;\n\n    const authManager = getAuthManager();\n    const userDAO = getUserDAO();\n    const emailClient = getEmailClient();\n\n    const resetPasswordToken = authManager.generateRandomToken();\n\n    const resetPasswordExpires = dayjs()\n      .add(configs.PASSWORD_RESET_TOKEN_EXPIRES_IN_MINUTES, \"minutes\")\n      .toDate();\n\n    const user = await userDAO.setResetPasswordToken({\n      email,\n      token: resetPasswordToken,\n      expires: resetPasswordExpires,\n    });\n\n    if (!user) return { success: false, errorCode: \"email_not_found\" };\n\n    const res = await emailClient.sendForgottenPasswordMail({\n      email,\n      resetPasswordToken,\n      language: user.language,\n      frontendUrl,\n    });\n\n    if (!res.success) return res;\n\n    return { success: true, data: { user } };\n  }\n\n  static async resetPassword(params: {\n    password: string;\n    resetPasswordToken: string;\n  }): Promise<CustomResponse<UserWithoutPassword, \"user_not_found\">> {\n    const { password, resetPasswordToken } = params;\n\n    const userDAO = getUserDAO();\n    const authManager = getAuthManager();\n\n    const newHashedPassword = authManager.hashPassword(password);\n\n    const user = await userDAO.updateUserPassword({\n      newHashedPassword,\n      resetPasswordToken,\n    });\n\n    if (!user) return { success: false, errorCode: \"user_not_found\" };\n\n    return { success: true, data: user };\n  }\n\n  static async updatePassword(params: {\n    previousPassword: string;\n    password: string;\n    userId: string;\n  }): Promise<\n    CustomResponse<\n      { user: UserWithoutPassword; token: string },\n      | \"user_not_found\"\n      | \"missing_password\"\n      | \"wrong_password\"\n      | \"user_not_found_when_updating_password\"\n    >\n  > {\n    const { previousPassword, password, userId } = params;\n\n    const userDAO = getUserDAO();\n    const authManager = getAuthManager();\n\n    const user = await userDAO.getUserWithPassword({ userId });\n\n    if (!user) return { success: false, errorCode: \"user_not_found\" };\n\n    if (!user.password) return { success: false, errorCode: \"missing_password\" };\n\n    if (!authManager.comparePasswords(previousPassword, user.password))\n      return { success: false, errorCode: \"wrong_password\" };\n\n    const newHashedPassword = authManager.hashPassword(password);\n\n    const newUser = await userDAO.updateUserPassword({\n      newHashedPassword,\n      userId,\n    });\n\n    if (!newUser)\n      return { success: false, errorCode: \"user_not_found_when_updating_password\" };\n\n    const token = authManager.encodeUser({\n      decodedUser: {\n        roles: newUser.roles,\n        userId: newUser._id,\n        amazonId: newUser.amazonId,\n      },\n      staySignedIn: false,\n    });\n\n    return { success: true, data: { user: newUser, token } };\n  }\n\n  static async emailValidation(params: {\n    userId: string;\n  }): Promise<CustomResponse<{ user: UserWithoutPassword }, \"user_not_found\">> {\n    const { userId } = params;\n\n    const userDAO = getUserDAO();\n\n    const user = await userDAO.validateEmail({ userId });\n\n    if (!user) return { success: false, errorCode: \"user_not_found\" };\n\n    return { success: true, data: { user } };\n  }\n\n  static async validationMail(params: {\n    email: string;\n    frontendUrl: string;\n  }): Promise<\n    CustomResponse<\n      { user: UserWithoutPassword },\n      \"user_not_found\" | \"already_validated\" | \"email_not_sent\"\n    >\n  > {\n    const { email, frontendUrl } = params;\n\n    const userDAO = getUserDAO();\n    const emailClient = getEmailClient();\n\n    const user = await userDAO.getUser({ email });\n\n    if (!user) return { success: false, errorCode: \"user_not_found\" };\n\n    if (user.emailValidation) return { success: false, errorCode: \"already_validated\" };\n\n    const res = await emailClient.sendEmailValidationMail({\n      email,\n      userId: user._id,\n      language: user.language,\n      userName: user.name,\n      frontendUrl,\n    });\n\n    if (!res.success) return res;\n\n    return { success: true, data: { user } };\n  }\n\n  static async updateUserInfo(params: {\n    userId: string;\n    decoded: DecodedUser;\n    updates: {\n      name?: string;\n      testerMessage?: string;\n      sellerMessage?: string;\n      paypalEmail?: string;\n      amazonId?: string;\n    };\n  }): Promise<\n    CustomResponse<\n      { user: UserWithoutPassword; token: string },\n      \"user_not_found\" | \"unauthorized\" | \"name_already_used\"\n    >\n  > {\n    const { decoded, userId, updates } = params;\n\n    const userDAO = getUserDAO();\n    const authManager = getAuthManager();\n\n    if (decoded.userId !== userId && !decoded.roles.includes(Role.ADMIN)) {\n      return { success: false, errorCode: \"unauthorized\" };\n    }\n\n    const updateRes = await userDAO.updateUser({ userId, updates });\n\n    if (!updateRes.success) return updateRes;\n\n    const user = updateRes.data;\n\n    const token = authManager.encodeUser({\n      decodedUser: {\n        roles: user.roles,\n        userId: user._id,\n        amazonId: user.amazonId,\n      },\n      staySignedIn: false,\n    });\n\n    return { success: true, data: { user, token } };\n  }\n\n  static async checkToken(params: { logged: boolean; decoded?: DecodedUser }): Promise<\n    CustomResponse<\n      | {\n          user: null;\n          check: boolean;\n        }\n      | {\n          user: UserWithoutPassword;\n          check: boolean;\n          requestedTestsCount: number;\n          processingTestsCount: number;\n          completedTestsCount: number;\n          cancelledTestsCount: number;\n          guiltyTestsCount: number;\n        }\n      | { check: boolean },\n      \"user_not_found_when_logging\"\n    >\n  > {\n    const { logged, decoded } = params;\n\n    const userDAO = getUserDAO();\n    const testDAO = getTestDAO();\n\n    if (!decoded?.userId) {\n      return { success: true, data: { user: null, check: false } };\n    }\n    if (!logged) {\n      const [\n        user,\n        requestedTestsCount,\n        processingTestsCount,\n        completedTestsCount,\n        cancelledTestsCount,\n        guiltyTestsCount,\n      ] = await Promise.all([\n        userDAO.getUser({ userId: decoded.userId }),\n        testDAO.countTestWithStatues({\n          userId: decoded.userId,\n          statuses: GLOBAL_TEST_STATUSES.REQUESTED,\n        }),\n        testDAO.countTestWithStatues({\n          userId: decoded.userId,\n          statuses: GLOBAL_TEST_STATUSES.PROCESSING,\n        }),\n        testDAO.countTestWithStatues({\n          userId: decoded.userId,\n          statuses: GLOBAL_TEST_STATUSES.COMPLETED,\n        }),\n        testDAO.countTestWithStatues({\n          userId: decoded.userId,\n          statuses: GLOBAL_TEST_STATUSES.CANCELLED,\n        }),\n        testDAO.countTestWithStatues({\n          userId: decoded.userId,\n          statuses: GLOBAL_TEST_STATUSES.CANCELLED,\n          withGuilty: true,\n        }),\n      ]);\n\n      if (!user) return { success: false, errorCode: \"user_not_found_when_logging\" };\n\n      return {\n        success: true,\n        data: {\n          user,\n          requestedTestsCount,\n          processingTestsCount,\n          completedTestsCount,\n          cancelledTestsCount,\n          guiltyTestsCount,\n          check: true,\n        },\n      };\n    }\n    return { success: true, data: { check: true } };\n  }\n\n  static async sendContactUsEmail(params: {\n    name: string;\n    email: string;\n    message: string;\n  }): Promise<CustomResponse<undefined, \"email_not_sent\">> {\n    const { name, email, message } = params;\n\n    const emailClient = getEmailClient();\n\n    const res = await emailClient.sendContactUsMail({\n      name,\n      email,\n      message,\n    });\n\n    if (!res.success) return res;\n\n    return { success: true, data: undefined };\n  }\n\n  static async getOne(params: { userId: string }): Promise<\n    CustomResponse<\n      {\n        user: UserWithoutPassword;\n        processingTestsCount: number;\n        completedTestsCount: number;\n        guiltyTestsCount: number;\n      },\n      \"user_not_found\"\n    >\n  > {\n    const { userId } = params;\n\n    const userDAO = getUserDAO();\n\n    const testDAO = getTestDAO();\n\n    const [user, processingTestsCount, completedTestsCount, guiltyTestsCount] =\n      await Promise.all([\n        userDAO.getUser({ userId }),\n        testDAO.countTestWithStatues({\n          userId,\n          statuses: GLOBAL_TEST_STATUSES.PROCESSING,\n        }),\n        testDAO.countTestWithStatues({\n          userId,\n          statuses: GLOBAL_TEST_STATUSES.COMPLETED,\n        }),\n        testDAO.countTestWithStatues({\n          userId,\n          statuses: GLOBAL_TEST_STATUSES.CANCELLED,\n          withGuilty: true,\n        }),\n      ]);\n\n    if (!user) return { success: false, errorCode: \"user_not_found\" };\n\n    return {\n      success: true,\n      data: {\n        user,\n        processingTestsCount,\n        completedTestsCount,\n        guiltyTestsCount,\n      },\n    };\n  }\n\n  static async googleRegister(params: {\n    credential: string;\n    roles: Array<Role>;\n    language: Language;\n  }): Promise<\n    CustomResponse<\n      SignedInUser,\n      | \"user_not_found_when_logging\"\n      | \"user_not_found_when_adding_email\"\n      | \"name_already_used_when_adding_email\"\n      | \"duplicate_email\"\n      | \"duplicate_name\"\n      | \"unknown_error\"\n      | \"invalid_token\"\n      | \"user_email_not_found\"\n      | \"user_name_not_found\"\n    >\n  > {\n    const { credential, roles, language: paramsLanguage } = params;\n\n    const userDAO = getUserDAO();\n    const authManager = getAuthManager();\n\n    const googleLoginRes = await authManager.googleLogin({ credential });\n\n    if (!googleLoginRes.success) return googleLoginRes;\n\n    const {\n      googleId,\n      name: firstName,\n      email,\n      language: googleLanguage,\n    } = googleLoginRes.data;\n\n    const language = googleLanguage || paramsLanguage;\n\n    if (!email) return { success: false, errorCode: \"user_email_not_found\" };\n    if (!firstName) return { success: false, errorCode: \"user_name_not_found\" };\n\n    const name = firstName + Math.round(Math.random() * 10000).toString();\n\n    const googleUser = await userDAO.getUser({ googleId });\n\n    if (googleUser) return this.login({ user: googleUser, staySignedIn: false });\n\n    const emailUser = await userDAO.getUserWithPassword({ email });\n    if (emailUser) {\n      const updateUserRes = await userDAO.updateUser({\n        userId: emailUser._id,\n        updates: { googleId },\n      });\n      if (!updateUserRes.success) {\n        return formatFailedResponse(updateUserRes, {\n          user_not_found: \"user_not_found_when_adding_email\",\n          name_already_used: \"name_already_used_when_adding_email\",\n        });\n      }\n      return this.login({ user: updateUserRes.data, staySignedIn: false });\n    }\n\n    const createUserRes = await userDAO.createUser({\n      userData: {\n        name,\n        email,\n        roles,\n        googleId,\n        emailValidation: true,\n        language,\n        isCertified: false,\n        password: null,\n      },\n    });\n\n    if (!createUserRes.success) return createUserRes;\n\n    return this.login({ user: createUserRes.data, staySignedIn: false });\n  }\n\n  static async googleLogin(params: {\n    credential: string;\n    staySignedIn: boolean;\n  }): Promise<\n    CustomResponse<\n      SignedInUser,\n      \"user_not_found\" | \"user_not_found_when_logging\" | \"unknown_error\" | \"invalid_token\"\n    >\n  > {\n    const { credential, staySignedIn } = params;\n\n    const userDAO = getUserDAO();\n    const authManager = getAuthManager();\n\n    const googleLoginRes = await authManager.googleLogin({ credential });\n\n    if (!googleLoginRes.success) return googleLoginRes;\n\n    const { googleId, email } = googleLoginRes.data;\n\n    const user = await userDAO.getUser({ googleId, email });\n\n    if (!user) return { success: false, errorCode: \"user_not_found\" };\n\n    if (!user?.googleId && email) {\n      await userDAO.updateUser({ userId: user._id, updates: { googleId } });\n    }\n\n    return UserController.login({ user, staySignedIn });\n  }\n\n  static async facebookRegister(params: {\n    accessToken: string;\n    roles: Array<Role>;\n    language: Language;\n  }): Promise<\n    CustomResponse<\n      SignedInUser,\n      | \"issue_with_facebook_login\"\n      | \"facebook_account_missing_email\"\n      | \"name_already_used\"\n      | \"user_not_found_when_adding_email\"\n      | \"user_not_found_when_logging\"\n      | \"duplicate_email_when_creating_user\"\n      | \"duplicate_name\"\n    >\n  > {\n    const { accessToken, roles, language } = params;\n\n    const authManager = getAuthManager();\n    const userDAO = getUserDAO();\n\n    const facebookLoginRes = await authManager.facebookLogin({ accessToken });\n\n    if (!facebookLoginRes.success)\n      return formatFailedResponse(facebookLoginRes, {\n        unknown_error: \"issue_with_facebook_login\",\n        facebook_account_missing_email: \"facebook_account_missing_email\",\n      });\n\n    const facebookData = facebookLoginRes.data;\n\n    const emailUser = await userDAO.getUser({ email: facebookData.email });\n\n    if (emailUser) {\n      const updateUserRes = await userDAO.updateUser({\n        userId: emailUser._id,\n        updates: { facebookId: facebookData.facebookId },\n      });\n\n      if (!updateUserRes.success) {\n        return formatFailedResponse(updateUserRes, {\n          name_already_used: \"name_already_used\",\n          user_not_found: \"user_not_found_when_adding_email\",\n        });\n      }\n\n      return this.login({ user: updateUserRes.data, staySignedIn: false });\n    }\n\n    const createUserRes = await userDAO.createUser({\n      userData: {\n        name: facebookData.name,\n        email: facebookData.email,\n        roles,\n        facebookId: facebookData.facebookId,\n        emailValidation: true,\n        language,\n        isCertified: false,\n        password: null,\n      },\n    });\n\n    if (!createUserRes.success)\n      return formatFailedResponse(createUserRes, {\n        duplicate_email: \"duplicate_email_when_creating_user\",\n        duplicate_name: \"duplicate_name\",\n      });\n\n    return this.login({ user: createUserRes.data, staySignedIn: false });\n  }\n\n  static async facebookLogin(params: {\n    accessToken: string;\n    staySignedIn: boolean;\n  }): Promise<\n    CustomResponse<\n      SignedInUser,\n      | \"user_not_found\"\n      | \"user_not_found_when_logging\"\n      | \"facebook_account_missing_email\"\n      | \"issue_with_facebook_login\"\n    >\n  > {\n    const { accessToken, staySignedIn } = params;\n\n    const authManager = getAuthManager();\n    const userDAO = getUserDAO();\n\n    const facebookLoginRes = await authManager.facebookLogin({ accessToken });\n\n    if (!facebookLoginRes.success)\n      return formatFailedResponse(facebookLoginRes, {\n        unknown_error: \"issue_with_facebook_login\",\n        facebook_account_missing_email: \"facebook_account_missing_email\",\n      });\n\n    const facebookData = facebookLoginRes.data;\n\n    const facebookUser = await userDAO.getUser({ facebookId: facebookData.facebookId });\n\n    if (!facebookUser) return { success: false, errorCode: \"user_not_found\" };\n\n    return this.login({ user: facebookUser, staySignedIn });\n  }\n\n  static async updateLanguage(params: {\n    userId: string;\n    language: Language;\n  }): Promise<CustomResponse<UserWithoutPassword, \"user_not_found\">> {\n    const { userId, language } = params;\n\n    const userDAO = getUserDAO();\n\n    const user = await userDAO.updateUserWIthNoUniqueField({\n      userId,\n      updates: { language },\n    });\n\n    if (!user) return { success: false, errorCode: \"user_not_found\" };\n\n    return { success: true, data: user };\n  }\n}\n"],"names":[],"mappings":"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","debug_id":"32b96257-b4c1-5c0d-8634-39064cbc237f"}