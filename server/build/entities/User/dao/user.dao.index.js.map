{"version":3,"file":"user.dao.index.js","sources":["entities/User/dao/user.dao.index.ts"],"sourceRoot":"/","sourcesContent":["import { configs } from \"@/configs.js\";\nimport { Role } from \"@/utils/constants.js\";\nimport { generateMongooseSchemaFromZod } from \"@/utils/generateMongooseSchemaFromZod/index.js\";\nimport { Language } from \"@/utils/Language.js\";\nimport { omittedSavedDataSchema } from \"@/utils/savedDataSchema.js\";\nimport { createSingletonGetter } from \"@/utils/singleton.js\";\nimport dayjs from \"dayjs\";\nimport mongoose, { Types } from \"mongoose\";\nimport { User, userSchema } from \"../user.entity.js\";\nimport { UserDAO } from \"./user.dao.type.js\";\n\nconst mongooseUserSchema = new mongoose.Schema<User>(\n  generateMongooseSchemaFromZod(userSchema.omit(omittedSavedDataSchema)),\n  { timestamps: true }\n);\n\nmongooseUserSchema\n  .index({ email: 1 }, { unique: true })\n  .index({ name: 1 }, { unique: true })\n  .index({ googleId: 1 }, { unique: true, sparse: true })\n  .index({ facebookId: 1 }, { unique: true, sparse: true })\n  .index({ amazonId: 1 }, { unique: true, sparse: true })\n  .index({ \"affiliated.by\": 1, _id: -1 });\n\nconst userModel = mongoose.model<User>(\"User\", mongooseUserSchema);\n\nconst createUserDAO = (): UserDAO => {\n  const checkAffiliated = async (\n    affiliatedBy?: string\n  ): Promise<{ by: string; rateInPercent: number } | undefined> => {\n    if (!affiliatedBy) return undefined;\n    if (!Types.ObjectId.isValid(affiliatedBy)) return undefined;\n    const affiliatedByUser = await userModel.findOne({ _id: affiliatedBy });\n    if (!affiliatedByUser) return undefined;\n\n    return {\n      by: affiliatedByUser._id,\n      rateInPercent:\n        affiliatedByUser.personalAffiliationRateInPercent ||\n        configs.AFFILIATION_RATE_IN_PERCENT,\n    };\n  };\n\n  return {\n    getUser: async (params) => {\n      const user = await userModel\n        .findOne({\n          ...(\"email\" in params && { email: params.email }),\n          ...(\"userId\" in params && { _id: params.userId }),\n          ...(\"googleId\" in params && {\n            $or: [{ googleId: params.googleId }, { email: params.email }],\n          }),\n          ...(\"facebookId\" in params && { facebookId: params.facebookId }),\n        })\n        .lean();\n      if (!user) return null;\n      const { password, ...userWithoutPassword } = user;\n      return JSON.parse(JSON.stringify(userWithoutPassword));\n    },\n    setIsCertified: async ({ userId, isCertified }) => {\n      const user = await userModel\n        .findByIdAndUpdate(userId, { $set: { isCertified } }, { new: true })\n        .lean();\n      if (!user) return null;\n      const { password, ...userWithoutPassword } = user;\n      return JSON.parse(JSON.stringify(userWithoutPassword));\n    },\n    createUser: async ({ userData }) => {\n      try {\n        const affiliated = await checkAffiliated(userData.affiliatedBy);\n        const user = await userModel.create({ ...userData, affiliated });\n        const { password, ...userWithoutPassword } = user.toJSON();\n        return { success: true, data: JSON.parse(JSON.stringify(userWithoutPassword)) };\n      } catch (err: any) {\n        if (err.code === 11000) {\n          if (err.keyPattern.email) {\n            return { success: false, errorCode: \"duplicate_email\" };\n          } else if (err.keyPattern.name) {\n            return { success: false, errorCode: \"duplicate_name\" };\n          }\n        }\n        throw err;\n      }\n    },\n    upToDateLastLogin: async ({ userId }) => {\n      const user = await userModel\n        .findByIdAndUpdate(userId, { $set: { lastLogin: new Date() } }, { new: true })\n        .lean();\n      if (!user) return null;\n      const { password, ...userWithoutPassword } = user;\n      return JSON.parse(JSON.stringify(userWithoutPassword));\n    },\n    setResetPasswordToken: async ({ email, token, expires }) => {\n      const user = await userModel\n        .findOneAndUpdate(\n          { email },\n          { $set: { resetPasswordToken: token, resetPasswordExpires: expires } },\n          { new: true }\n        )\n        .lean();\n      if (!user) return null;\n      const { password, ...userWithoutPassword } = user;\n      return JSON.parse(JSON.stringify(userWithoutPassword));\n    },\n    getUserWithPassword: async (params) => {\n      const user = await userModel\n        .findOne({\n          ...(\"email\" in params && { email: params.email }),\n          ...(\"userId\" in params && { _id: params.userId }),\n        })\n        .lean();\n      if (!user) return null;\n      return JSON.parse(JSON.stringify(user));\n    },\n    updateUserPassword: async (params) => {\n      const user = await userModel\n        .findOneAndUpdate(\n          {\n            ...(\"resetPasswordToken\" in params && {\n              resetPasswordToken: params.resetPasswordToken,\n              resetPasswordExpires: { $gte: new Date() },\n            }),\n            ...(\"userId\" in params && {\n              _id: params.userId,\n            }),\n          },\n          {\n            $set: { password: params.newHashedPassword },\n            ...(\"resetPasswordToken\" in params && {\n              $unset: { resetPasswordToken: 1, resetPasswordExpires: 1 },\n            }),\n          },\n          { new: true, projection: { password: 0 } }\n        )\n        .lean();\n\n      if (!user) return null;\n      return JSON.parse(JSON.stringify(user));\n    },\n    validateEmail: async ({ userId }) => {\n      const user = await userModel\n        .findByIdAndUpdate(\n          userId,\n          { $set: { emailValidation: true } },\n          { new: true, projection: { password: 0 } }\n        )\n        .lean();\n      if (!user) return null;\n      return JSON.parse(JSON.stringify(user));\n    },\n    updateUser: async ({ userId, updates }) => {\n      try {\n        const userToUpdate = await userModel\n          .findByIdAndUpdate(\n            userId,\n            { $set: updates },\n            { new: true, projection: { password: 0 } }\n          )\n          .lean();\n        if (!userToUpdate) return { success: false, errorCode: \"user_not_found\" };\n        const user = JSON.parse(JSON.stringify(userToUpdate));\n        return { success: true, data: user };\n      } catch (err: any) {\n        if (err.code === 11000) {\n          if (err.keyPattern.name) {\n            return { success: false, errorCode: \"name_already_used\" };\n          }\n        }\n        throw err;\n      }\n    },\n    updateUserWIthNoUniqueField: async ({ userId, updates }) => {\n      const userToUpdate = await userModel\n        .findByIdAndUpdate(\n          userId,\n          { $set: updates },\n          { new: true, projection: { password: 0 } }\n        )\n        .lean<Omit<User, \"password\">>();\n      if (!userToUpdate) return null;\n      return JSON.parse(JSON.stringify(userToUpdate));\n    },\n    getTestersContacts: async () => {\n      const testers = await userModel\n        .find({ roles: { $in: [Role.TESTER] } }, { email: 1, name: 1, language: 1 })\n        .lean<Array<{ email: string; name: string; language: Language }>>();\n      return testers;\n    },\n    getUserAffiliated: async ({ userId, page, limit }) => {\n      const [affiliatedUsers, totalCount] = await Promise.all([\n        userModel\n          .find(\n            { \"affiliated.by\": userId },\n            { _id: 1, name: 1, email: 1, \"affiliated.rateInPercent\": 1, createdAt: 1 }\n          )\n          .sort({ _id: -1 })\n          .skip((page - 1) * limit)\n          .limit(limit)\n          .lean<\n            Array<{\n              _id: string;\n              name: string;\n              email: string;\n              affiliated: { rateInPercent: number };\n              createdAt: string;\n            }>\n          >(),\n        userModel.find({ \"affiliated.by\": userId }).countDocuments(),\n      ]);\n\n      const affiliated = affiliatedUsers.map((user) => ({\n        userId: user._id,\n        name: user.name,\n        email: user.email,\n        rateInPercent: user.affiliated.rateInPercent,\n        createdAt:\n          user.createdAt ||\n          dayjs(new Types.ObjectId(user._id).getTimestamp()).toISOString(),\n      }));\n      return { affiliated, totalCount };\n    },\n    getUserAffiliatedCount: async ({ userId }) => {\n      const totalCount = await userModel\n        .find({ \"affiliated.by\": userId })\n        .countDocuments();\n\n      return totalCount;\n    },\n    addActivationEvents: async ({ userId, eventTypes }) => {\n      await userModel.updateOne(\n        { _id: userId },\n        {\n          $addToSet: {\n            activationEvents: eventTypes.map((eventType) => ({\n              eventType,\n              eventDate: new Date(),\n            })),\n          },\n        }\n      );\n    },\n    getUserIds: async ({ role }) => {\n      const users = await userModel.find({ roles: role }).select({ _id: 1 }).lean();\n      return users.map((user) => user._id);\n    },\n  };\n};\n\nexport const getUserDAO = createSingletonGetter(createUserDAO);\n"],"names":[],"mappings":"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","debug_id":"ca120209-729d-58cd-9b59-11c0860eebda"}