{"version":3,"file":"user.dao.index.js","sources":["entities/User/dao/user.dao.index.ts"],"sourceRoot":"/","sourcesContent":["import { generateMongooseSchemaFromZod } from \"@/utils/generateMongooseSchemaFromZod/index.js\";\nimport { createSingletonGetter } from \"@/utils/singleton.js\";\nimport mongoose from \"mongoose\";\nimport { User, userDataSchema } from \"../user.entity.js\";\nimport { UserDAO } from \"./user.dao.type.js\";\n\nconst userSchema = new mongoose.Schema<User>(\n  generateMongooseSchemaFromZod(userDataSchema)\n);\n\nuserSchema\n  .index({ email: 1 }, { unique: true })\n  .index({ name: 1 }, { unique: true })\n  .index({ googleId: 1 }, { unique: true, sparse: true })\n  .index({ facebookId: 1 }, { unique: true, sparse: true })\n  .index({ amazonId: 1 }, { unique: true, sparse: true });\n\nconst userModel = mongoose.model<User>(\"User\", userSchema);\n\nconst createUserDAO = (): UserDAO => {\n  return {\n    getUser: async (params) => {\n      const user = await userModel\n        .findOne({\n          ...(\"email\" in params && { email: params.email }),\n          ...(\"userId\" in params && { _id: params.userId }),\n          ...(\"googleId\" in params && {\n            $or: [{ googleId: params.googleId }, { email: params.email }],\n          }),\n          ...(\"facebookId\" in params && { facebookId: params.facebookId }),\n        })\n        .lean();\n      if (!user) return null;\n      const { password, ...userWithoutPassword } = user;\n      return JSON.parse(JSON.stringify(userWithoutPassword));\n    },\n    setIsCertified: async ({ userId, isCertified }) => {\n      const user = await userModel\n        .findByIdAndUpdate(userId, { $set: { isCertified } }, { new: true })\n        .lean();\n      if (!user) return null;\n      const { password, ...userWithoutPassword } = user;\n      return JSON.parse(JSON.stringify(userWithoutPassword));\n    },\n    createUser: async ({ userData }) => {\n      try {\n        const user = await userModel.create(userData);\n        const { password, ...userWithoutPassword } = user.toJSON();\n        return { success: true, data: JSON.parse(JSON.stringify(userWithoutPassword)) };\n      } catch (err: any) {\n        if (err.code === 11000) {\n          if (err.keyPattern.email) {\n            return { success: false, errorCode: \"duplicate_email\" };\n          } else if (err.keyPattern.name) {\n            return { success: false, errorCode: \"duplicate_name\" };\n          }\n        }\n        throw err;\n      }\n    },\n    upToDateLastLogin: async ({ userId }) => {\n      const user = await userModel\n        .findByIdAndUpdate(userId, { $set: { lastLogin: new Date() } }, { new: true })\n        .lean();\n      if (!user) return null;\n      const { password, ...userWithoutPassword } = user;\n      return JSON.parse(JSON.stringify(userWithoutPassword));\n    },\n    setResetPasswordToken: async ({ email, token, expires }) => {\n      const user = await userModel\n        .findOneAndUpdate(\n          { email },\n          { $set: { resetPasswordToken: token, resetPasswordExpires: expires } },\n          { new: true }\n        )\n        .lean();\n      if (!user) return null;\n      const { password, ...userWithoutPassword } = user;\n      return JSON.parse(JSON.stringify(userWithoutPassword));\n    },\n    getUserWithPassword: async (params) => {\n      const user = await userModel\n        .findOne({\n          ...(\"email\" in params && { email: params.email }),\n          ...(\"userId\" in params && { _id: params.userId }),\n        })\n        .lean();\n      if (!user) return null;\n      return JSON.parse(JSON.stringify(user));\n    },\n    updateUserPassword: async (params) => {\n      const user = await userModel\n        .findOneAndUpdate(\n          {\n            ...(\"resetPasswordToken\" in params && {\n              resetPasswordToken: params.resetPasswordToken,\n              resetPasswordExpires: { $gte: new Date() },\n            }),\n            ...(\"userId\" in params && {\n              _id: params.userId,\n            }),\n          },\n          {\n            $set: { password: params.newHashedPassword },\n            ...(\"resetPasswordToken\" in params && {\n              $unset: { resetPasswordToken: 1, resetPasswordExpires: 1 },\n            }),\n          },\n          { new: true }\n        )\n        .lean();\n\n      if (!user) return null;\n      const { password, ...userWithoutPassword } = user;\n      return JSON.parse(JSON.stringify(userWithoutPassword));\n    },\n    validateEmail: async ({ userId }) => {\n      const user = await userModel\n        .findByIdAndUpdate(userId, { $set: { emailValidation: true } }, { new: true })\n        .lean();\n      if (!user) return null;\n      const { password, ...userWithoutPassword } = user;\n      return JSON.parse(JSON.stringify(userWithoutPassword));\n    },\n    updateUser: async ({ userId, updates }) => {\n      try {\n        const userToUpdate = await userModel\n          .findByIdAndUpdate(userId, { $set: updates }, { new: true })\n          .lean();\n        if (!userToUpdate) return { success: false, errorCode: \"user_not_found\" };\n        const { password, ...userWithoutPassword } = userToUpdate;\n        const user = JSON.parse(JSON.stringify(userWithoutPassword));\n        return { success: true, data: user };\n      } catch (err: any) {\n        if (err.code === 11000) {\n          if (err.keyPattern.name) {\n            return { success: false, errorCode: \"name_already_used\" };\n          }\n        }\n        throw err;\n      }\n    },\n    updateUserWIthNoUniqueField: async ({ userId, updates }) => {\n      const userToUpdate = await userModel\n        .findByIdAndUpdate(userId, { $set: updates }, { new: true })\n        .lean();\n      if (!userToUpdate) return null;\n      const { password, ...userWithoutPassword } = userToUpdate;\n      return JSON.parse(JSON.stringify(userWithoutPassword));\n    },\n  };\n};\n\nexport const getUserDAO = createSingletonGetter(createUserDAO);\n"],"names":[],"mappings":"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","debug_id":"5ddab641-abbe-50a9-a533-fe92991312cf"}