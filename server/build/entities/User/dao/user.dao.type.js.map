{"version":3,"file":"user.dao.type.js","sources":["entities/User/dao/user.dao.type.ts"],"sourceRoot":"/","sourcesContent":["import { CustomResponse } from \"@/utils/CustomResponse.js\";\nimport { Language } from \"@/utils/Language.js\";\nimport { User, UserData, UserWithoutPassword } from \"../user.entity.js\";\n\nexport type UserDAO = {\n  getUser: (\n    params:\n      | { userId: string }\n      | { email: string }\n      | { googleId: string; email?: string }\n      | { facebookId: string }\n  ) => Promise<UserWithoutPassword | null>;\n  setIsCertified: (params: {\n    userId: string;\n    isCertified: boolean;\n  }) => Promise<UserWithoutPassword | null>;\n  createUser: (params: {\n    userData: UserData;\n  }) => Promise<\n    CustomResponse<UserWithoutPassword, \"duplicate_email\" | \"duplicate_name\">\n  >;\n  getUserWithPassword: (\n    params: { email: string } | { userId: string }\n  ) => Promise<User | null>;\n  upToDateLastLogin: (params: { userId: string }) => Promise<UserWithoutPassword | null>;\n  setResetPasswordToken: (params: {\n    email: string;\n    token: string;\n    expires: Date;\n  }) => Promise<UserWithoutPassword | null>;\n  updateUserPassword: (\n    params:\n      | {\n          resetPasswordToken: string;\n          newHashedPassword: string;\n        }\n      | { userId: string; newHashedPassword: string }\n  ) => Promise<UserWithoutPassword | null>;\n  validateEmail: (params: { userId: string }) => Promise<UserWithoutPassword | null>;\n  updateUser: (params: {\n    userId: string;\n    updates: {\n      name?: string;\n      testerMessage?: string;\n      sellerMessage?: string;\n      paypalEmail?: string;\n      amazonId?: string;\n      googleId?: string;\n      facebookId?: string;\n    };\n  }) => Promise<\n    CustomResponse<UserWithoutPassword, \"name_already_used\" | \"user_not_found\">\n  >;\n  updateUserWIthNoUniqueField: (params: {\n    userId: string;\n    updates: {\n      testerMessage?: string;\n      sellerMessage?: string;\n      paypalEmail?: string;\n      googleId?: string;\n      facebookId?: string;\n      language?: Language;\n    };\n  }) => Promise<UserWithoutPassword | null>;\n};\n"],"names":[],"mappings":"","debug_id":"2f5541f5-38a3-5a33-b0f2-6716bd55e021"}