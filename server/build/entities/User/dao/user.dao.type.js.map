{"version":3,"file":"user.dao.type.js","sources":["entities/User/dao/user.dao.type.ts"],"sourceRoot":"/","sourcesContent":["import { Role } from \"@/utils/constants.js\";\nimport { CustomResponse } from \"@/utils/CustomResponse.js\";\nimport { Language } from \"@/utils/Language.js\";\nimport {\n  ActivationEventType,\n  User,\n  UserData,\n  UserWithoutPassword,\n} from \"../user.entity.js\";\n\nexport type UserDAO = {\n  getUser: (\n    params:\n      | { userId: string }\n      | { email: string }\n      | { googleId: string; email?: string }\n      | { facebookId: string }\n  ) => Promise<UserWithoutPassword | null>;\n  setIsCertified: (params: {\n    userId: string;\n    isCertified: boolean;\n  }) => Promise<UserWithoutPassword | null>;\n  createUser: (params: {\n    userData: UserData;\n  }) => Promise<\n    CustomResponse<UserWithoutPassword, \"duplicate_email\" | \"duplicate_name\">\n  >;\n  getUserWithPassword: (\n    params: { email: string } | { userId: string }\n  ) => Promise<User | null>;\n  upToDateLastLogin: (params: {\n    userId: string;\n    ip?: string;\n  }) => Promise<UserWithoutPassword | null>;\n  setResetPasswordToken: (params: {\n    email: string;\n    token: string;\n    expires: Date;\n  }) => Promise<UserWithoutPassword | null>;\n  updateUserPassword: (\n    params:\n      | {\n          resetPasswordToken: string;\n          newHashedPassword: string;\n        }\n      | { userId: string; newHashedPassword: string }\n  ) => Promise<UserWithoutPassword | null>;\n  validateEmail: (params: { userId: string }) => Promise<UserWithoutPassword | null>;\n  updateUser: (params: {\n    userId: string;\n    updates: {\n      name?: string;\n      testerMessage?: string;\n      sellerMessage?: string;\n      paypalEmail?: string;\n      amazonId?: string;\n      googleId?: string;\n      facebookId?: string;\n    };\n  }) => Promise<\n    CustomResponse<UserWithoutPassword, \"name_already_used\" | \"user_not_found\">\n  >;\n  updateUserWIthNoUniqueField: (params: {\n    userId: string;\n    updates: {\n      testerMessage?: string;\n      sellerMessage?: string;\n      paypalEmail?: string;\n      googleId?: string;\n      facebookId?: string;\n      language?: Language;\n    };\n  }) => Promise<UserWithoutPassword | null>;\n  getTestersContacts: () => Promise<\n    Array<{\n      email: User[\"email\"];\n      name: User[\"name\"];\n      language: User[\"language\"];\n    }>\n  >;\n  getUserAffiliated: (params: {\n    userId: string;\n    page: number;\n    limit: number;\n  }) => Promise<{\n    affiliated: Array<{\n      userId: string;\n      name: string;\n      email: string;\n      rateInPercent: number;\n      createdAt: string;\n      activationEvents: User[\"activationEvents\"];\n    }>;\n    totalCount: number;\n  }>;\n  getUserAffiliatedCount: (params: { userId: string }) => Promise<number>;\n  addActivationEvents: (params: {\n    userId: string;\n    eventTypes: Array<ActivationEventType>;\n  }) => Promise<void>;\n  getUserIds: (params: { role: Role }) => Promise<Array<string>>;\n  getUsers: () => Promise<Array<{ _id: string; name: string }>>;\n};\n"],"names":[],"mappings":"","debug_id":"952b3d38-0948-5026-839f-d199ae8c2656"}