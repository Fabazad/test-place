{"version":3,"file":"test.dao.type.js","sources":["entities/Test/dao/test.dao.type.ts"],"sourceRoot":"/","sourcesContent":["import { TestStatusUpdateParams } from \"@/utils/constants.js\";\nimport { CustomResponse } from \"@/utils/CustomResponse.js\";\nimport { TestStatus } from \"../test.constants.js\";\nimport { PopulatedTest, Test, TestData } from \"../test.entity.js\";\n\nexport type TestDAO = {\n  createTest: (params: {\n    testData: TestData;\n  }) => Promise<CustomResponse<Test, \"already_testing\" | \"previous_request_declined\">>;\n  findWIthAllPopulated: (params: {\n    statuses?: Array<TestStatus>;\n    seller?: string;\n    tester?: string;\n    skip: number;\n    limit: number;\n  }) => Promise<Array<PopulatedTest>>;\n  count: (params: {\n    statuses?: Array<TestStatus>;\n    seller?: string;\n    tester?: string;\n  }) => Promise<number>;\n  findById: (params: { id: string }) => Promise<Test | null>;\n  updateTestStatus: (params: {\n    id: string;\n    statusUpdate: TestStatusUpdateParams;\n    cancellationGuilty?: string;\n  }) => Promise<Test | null>;\n  findPopulatedById: (params: { id: string }) => Promise<PopulatedTest | null>;\n  countTestWithStatues: (params: {\n    userId: string;\n    statuses: Array<TestStatus>;\n    withGuilty?: boolean;\n  }) => Promise<number>;\n  findManyByUser: (params: {\n    userId: string;\n    status?: Array<TestStatus>;\n  }) => Promise<Array<Test>>;\n};\n"],"names":[],"mappings":"","debug_id":"3d716d6f-ace9-5915-b2c7-9bd666b7f4f7"}