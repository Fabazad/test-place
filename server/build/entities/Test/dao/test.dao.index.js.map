{"version":3,"file":"test.dao.index.js","sources":["entities/Test/dao/test.dao.index.ts"],"sourceRoot":"/","sourcesContent":["import { generateAmazonUrl } from \"@/entities/Product/product.constants.js\";\nimport { generateMongooseSchemaFromZod } from \"@/utils/generateMongooseSchemaFromZod/index.js\";\nimport { createSingletonGetter } from \"@/utils/singleton.js\";\nimport mongoose, { FilterQuery } from \"mongoose\";\nimport { GLOBAL_TEST_STATUSES, TestStatus } from \"../test.constants.js\";\nimport { PopulatedTest, Test, testDataSchema } from \"../test.entity.js\";\nimport { TestDAO } from \"./test.dao.type.js\";\n\nconst testMongooseSchema = new mongoose.Schema(\n  generateMongooseSchemaFromZod(testDataSchema),\n  { timestamps: true }\n);\n\ntestMongooseSchema.pre(\"save\", async function (next) {\n  // Check if document is new or a new status has been set\n  if (this.isNew || this.isModified(\"status\")) {\n    const document = this;\n    if (!(\"updates\" in document)) throw new Error(\"updates is missing\");\n    if (!(document.updates instanceof Array)) throw new Error(\"updates is not an array\");\n    if (!(\"status\" in document)) throw new Error(\"status is missing\");\n    document.updates.push({ date: new Date(), status: document.status });\n  }\n  next();\n});\n\ntestMongooseSchema.index({\n  \"product._id\": 1,\n  tester: 1,\n});\n\nconst testModel = mongoose.model<Test>(\"Test\", testMongooseSchema);\n\nexport const createTestDAO = (): TestDAO => {\n  const buildConditions = (\n    statuses?: Array<TestStatus>,\n    seller?: string,\n    tester?: string\n  ) => {\n    return {\n      ...(seller ? { seller } : {}),\n      ...(tester ? { tester } : {}),\n      ...(statuses ? { status: { $in: statuses } } : {}),\n    };\n  };\n\n  const formatOneTest = <Data extends Test | PopulatedTest>(test: Data): Data => {\n    test.product.amazonUrl = generateAmazonUrl(test.product);\n    // @ts-ignore\n    if (typeof test.seller === \"object\") delete test.seller.password;\n    // @ts-ignore\n    if (typeof test.tester === \"object\") delete test.tester.password;\n    return test;\n  };\n\n  const formatResults = <\n    Data extends Test | PopulatedTest | Array<Test> | Array<PopulatedTest>\n  >(\n    test: Data\n  ): Data => {\n    if (Array.isArray(test)) {\n      return JSON.parse(JSON.stringify(test.map((t) => formatOneTest(t))));\n    }\n    return JSON.parse(JSON.stringify(formatOneTest(test)));\n  };\n\n  return {\n    createTest: async ({ testData }) => {\n      const alreadyTesting = await testModel.findOne(\n        {\n          \"product._id\": testData.product._id,\n          tester: testData.tester,\n          status: {\n            $in: [...GLOBAL_TEST_STATUSES.REQUESTED, ...GLOBAL_TEST_STATUSES.PROCESSING],\n          },\n        },\n        { status: 1 }\n      );\n\n      if (alreadyTesting) {\n        if (alreadyTesting.status === TestStatus.REQUEST_DECLINED) {\n          return { success: false, errorCode: \"previous_request_declined\" };\n        }\n        return { success: false, errorCode: \"already_testing\" };\n      }\n\n      const res = await testModel.create(testData);\n      const test = formatResults(res.toJSON());\n      return { success: true, data: test };\n    },\n    findWIthAllPopulated: async ({ statuses, seller, tester, skip, limit }) => {\n      const res = await testModel\n        .find({\n          $or: [\n            { expirationDate: { $gt: new Date() } },\n            { expirationDate: { $eq: null } },\n          ],\n          ...buildConditions(statuses, seller, tester),\n        })\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .populate([\"seller\", \"tester\"])\n        .lean();\n\n      return JSON.parse(\n        JSON.stringify(\n          res.map((test) => {\n            test.product.amazonUrl = generateAmazonUrl(test.product);\n            // @ts-ignore\n            delete test.tester.password;\n            // @ts-ignore\n            delete test.seller.password;\n            return test;\n          })\n        )\n      );\n    },\n    count: async ({ statuses, seller, tester }) => {\n      const res = await testModel.countDocuments({\n        $or: [{ expirationDate: { $gt: new Date() } }, { expirationDate: { $eq: null } }],\n        ...buildConditions(statuses, seller, tester),\n      });\n      return res;\n    },\n    findById: async ({ id }) => {\n      const res = await testModel.findById(id).lean();\n      if (!res) return null;\n      res.product.amazonUrl = generateAmazonUrl(res.product);\n      return JSON.parse(JSON.stringify(res));\n    },\n    updateTestStatus: async ({ id, statusUpdate, cancellationGuilty }) => {\n      const test = await testModel\n        .findOneAndUpdate(\n          {\n            _id: id,\n          },\n          {\n            $set: {\n              ...(cancellationGuilty ? { cancellationGuilty } : {}),\n              status: statusUpdate.status,\n              ...(\"params\" in statusUpdate ? { ...statusUpdate.params } : {}),\n              expirationDate: null,\n              ...(statusUpdate.status === TestStatus.TEST_CANCELLED\n                ? { $inc: { remainingTestsCount: 1 } }\n                : {}),\n            },\n          },\n          {\n            new: true,\n          }\n        )\n        .lean();\n\n      if (!test) return null;\n\n      test.product.amazonUrl = generateAmazonUrl(test.product);\n\n      return JSON.parse(JSON.stringify(test));\n    },\n    findPopulatedById: async ({ id }) => {\n      const test = await testModel\n        .findById(id)\n        .populate([\"seller\", \"tester\"])\n        .lean<PopulatedTest>();\n      if (!test) return null;\n      test.product.amazonUrl = generateAmazonUrl(test.product);\n      // @ts-ignore\n      delete test.tester.password;\n      // @ts-ignore\n      delete test.seller.password;\n      test.product.amazonUrl = generateAmazonUrl(test.product);\n      return JSON.parse(JSON.stringify(test));\n    },\n    countTestWithStatues: async ({ userId, statuses, withGuilty = false }) => {\n      const query: FilterQuery<Test> = {\n        $and: [\n          { $or: [{ seller: userId }, { tester: userId }] },\n          {\n            $or: [\n              {\n                expirationDate: { $gt: new Date() },\n              },\n              {\n                expirationDate: { $eq: null },\n              },\n            ],\n          },\n        ],\n        status: { $in: statuses },\n      };\n\n      if (withGuilty) {\n        query.$and?.push({\n          $or: [\n            { cancellationGuilty: userId },\n            { cancellationGuilty: { $exists: false } },\n          ],\n        });\n      }\n\n      return testModel.countDocuments(query);\n    },\n  };\n};\n\nexport const getTestDAO = createSingletonGetter(createTestDAO);\n"],"names":[],"mappings":"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","debug_id":"30a401d8-3b55-5638-90ac-8ffdc12a8729"}