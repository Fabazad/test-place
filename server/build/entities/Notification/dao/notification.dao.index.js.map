{"version":3,"file":"notification.dao.index.js","sources":["entities/Notification/dao/notification.dao.index.ts"],"sourceRoot":"/","sourcesContent":["import { generateMongooseSchemaFromZod } from \"@/utils/generateMongooseSchemaFromZod/index.js\";\nimport { savedDataSchema } from \"@/utils/savedDataSchema.js\";\nimport { createSingletonGetter } from \"@/utils/singleton.js\";\nimport dayjs from \"dayjs\";\nimport mongoose from \"mongoose\";\nimport z from \"zod\";\nimport { notificationDataSchema } from \"../notification.entity.js\";\nimport { NotificationDAO } from \"./notification.dao.type.js\";\n\nconst notificationMongooseSchema = new mongoose.Schema(\n  generateMongooseSchemaFromZod(notificationDataSchema),\n  { timestamps: true }\n);\n\nnotificationMongooseSchema.index({ user: 1, viewDate: -1, createdAt: -1 });\n\nconst notificationSchema = notificationDataSchema.extend(savedDataSchema);\ntype Notification = z.infer<typeof notificationSchema>;\n\nconst notificationModel = mongoose.model<Notification>(\n  \"Notification\",\n  notificationMongooseSchema\n);\n\nexport const createNotificationDAO = (): NotificationDAO => {\n  return {\n    getUserNotifications: async (userId) => {\n      const res = await notificationModel\n        .find(\n          {\n            user: userId,\n            $or: [\n              {\n                viewDate: null,\n              },\n              {\n                viewDate: {\n                  $gte: dayjs().subtract(1, \"day\").toDate(),\n                },\n              },\n            ],\n          },\n          {},\n          { sort: { createdAt: -1 }, limit: 20 }\n        )\n        .lean();\n\n      return JSON.parse(JSON.stringify(res));\n    },\n    setNotificationsViewed: async ({ userId, notificationsIds }) => {\n      await notificationModel.updateMany(\n        {\n          _id: { $in: notificationsIds },\n          user: userId,\n        },\n        {\n          $set: {\n            viewDate: new Date(),\n          },\n        }\n      );\n    },\n    createNotification: async ({ notificationData }) => {\n      const notification = await notificationModel.create(notificationData);\n      return JSON.parse(JSON.stringify(notification.toJSON()));\n    },\n  };\n};\n\nexport const getNotificationDAO = createSingletonGetter(createNotificationDAO);\n"],"names":[],"mappings":";;AAAA,OAAO,EAAE,6BAA6B,EAAE,MAAM,gDAAgD,CAAC;AAC/F,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAC7D,OAAO,EAAE,qBAAqB,EAAE,MAAM,sBAAsB,CAAC;AAC7D,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,QAAQ,MAAM,UAAU,CAAC;AAEhC,OAAO,EAAE,sBAAsB,EAAE,MAAM,2BAA2B,CAAC;AAGnE,MAAM,0BAA0B,GAAG,IAAI,QAAQ,CAAC,MAAM,CACpD,6BAA6B,CAAC,sBAAsB,CAAC,EACrD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,0BAA0B,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAE3E,MAAM,kBAAkB,GAAG,sBAAsB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;AAG1E,MAAM,iBAAiB,GAAG,QAAQ,CAAC,KAAK,CACtC,cAAc,EACd,0BAA0B,CAC3B,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAoB,EAAE;IACzD,OAAO;QACL,oBAAoB,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,GAAG,GAAG,MAAM,iBAAiB;iBAChC,IAAI,CACH;gBACE,IAAI,EAAE,MAAM;gBACZ,GAAG,EAAE;oBACH;wBACE,QAAQ,EAAE,IAAI;qBACf;oBACD;wBACE,QAAQ,EAAE;4BACR,IAAI,EAAE,KAAK,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE;yBAC1C;qBACF;iBACF;aACF,EACD,EAAE,EACF,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CACvC;iBACA,IAAI,EAAE,CAAC;YAEV,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QACzC,CAAC;QACD,sBAAsB,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,gBAAgB,EAAE,EAAE,EAAE;YAC7D,MAAM,iBAAiB,CAAC,UAAU,CAChC;gBACE,GAAG,EAAE,EAAE,GAAG,EAAE,gBAAgB,EAAE;gBAC9B,IAAI,EAAE,MAAM;aACb,EACD;gBACE,IAAI,EAAE;oBACJ,QAAQ,EAAE,IAAI,IAAI,EAAE;iBACrB;aACF,CACF,CAAC;QACJ,CAAC;QACD,kBAAkB,EAAE,KAAK,EAAE,EAAE,gBAAgB,EAAE,EAAE,EAAE;YACjD,MAAM,YAAY,GAAG,MAAM,iBAAiB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;YACtE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3D,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,qBAAqB,CAAC,CAAC","debug_id":"8cfa2214-95ab-5919-9714-3768efc56db2"}